#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var https = require('https');
const lex = require('greenlock-express').create({
  version: 'v02', // draft-11 버전 인증서 사
  configDir: '/etc/letsencrypt', // 또는 ~/letsencrypt/etc
  server: 'https://acme-staging-v02.api.letsencrypt.org/directory',
  approveDomains: (opts, certs, cb) => {
    if (certs) {
      opts.domains = ['animalworld.xyz', 'www.animalworld.xyz'];
    } else {
      opts.email = 'swjasontodd@gmail.com';
      opts.agreeTos = true;
    }
    cb(null, { options: opts, certs });
  },
  renewWithin: 81 * 24 * 60 * 60 * 1000,
  renewBy: 80 * 24 * 60 * 60 * 1000,
  email: 'swjasontodd@gmail.com',
});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.SSL_PORT || 443);
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(lex.httpsOptions, lex.middleware(app));
var server2 = http.createServer(app).listen(process.env.PORT || 80);
// http.createServer(lex.middleware(require('redirect-https')())).listen(process.env.PORT || 80);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
